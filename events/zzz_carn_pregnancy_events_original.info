namespace = pregnancy

pregnancy.0001 = {
	hidden = yes
	immediate = {
		#PREGNANCY COMPLICATION CALCULATIONS & FLAG-SETTING
		random_list = {
			200 = { #All goes smoothly!
				#Less likely if health is bad
				modifier = {
					health <= fine_health
					add = -10
				}
				modifier = {
					health <= poor_health
					add = -15
				}

				#More kids means less risk of complications!
				modifier = {
					add = 5
					any_child = {
						even_if_dead = yes
						count >= 2
					}
				}
				modifier = {
					add = 5
					any_child = {
						even_if_dead = yes
						count >= 4
					}
				}

				#More likely if you have sacred childbirth
				modifier = {
					factor = 2 # Religious doctrine focusing on providing a sanitary birthing chamber and supplies should have a substantial impact on birth complications.
					faith = {
						has_doctrine_parameter = safer_childbirths_active
					}
				}
				#More likely if the Dynasty has the Kin legacy
				modifier = {
					factor = 1.5 # So too should constant care of pregnant/birthing mothers.
					has_dynasty = yes
					dynasty = {
						has_dynasty_perk = kin_legacy_3
					}
				}

				add_character_flag = {
					flag = birth_will_go_smoothly
					days = 270
				}
			}
			10 = { #Pregnancy ends prematurely
				trigger_event = {
					id = pregnancy.2101
					days = { 80 120 }
				}
			}
			3 = { #Child dies during delivery (this triggers when the birth "should" have gone down, since we don't want to create the baby)
				trigger_event = {
					id = birth.3001
					days = { 180 200 }
				}
			}
			2 = { #Mother dies
				modifier = { #to keep players from dying excessively
					add = -2
					is_ai = no
				}
				add_character_flag = { #Flags blocks other birth events
					flag = birth_mother_will_die
					days = 270
				}
			}
			2 = { #Mother and child dies (this triggers when the birth "should" have gone down, since we don't want to create the baby)
				modifier = { #to keep players from dying excessively
					add = -2
					is_ai = no
				}
				trigger_event = {
					id = birth.3021
					days = { 180 200 }
				}
			}
			10 = { #Sickly child (all other events happen as usual)
				modifier = {
					factor = 0.5 # Religious doctrine focusing on providing a sanitary birthing chamber and supplies should have a substantial impact on birth complications.
					faith = {
						has_doctrine_parameter = healthier_children_active
					}
				}
				add_character_flag = { #Flags blocks other birth events
					flag = birth_child_will_become_sickly
					days = 270
				}
			}
			5 = { #Ill mother (all other events happen as usual)
				modifier = { #to keep players from dying excessively
					add = -4
					is_ai = no
				}
				add_character_flag = { #Flags blocks other birth events
					flag = birth_mother_will_become_ill
					days = 270
				}
			}
		}
	}
}

pregnancy.1001 = {
	title = pregnancy.1001.t
	desc = pregnancy.1001.d
	theme = pregnancy
	left_portrait = scope:real_father

	trigger = {
		any_consort = {
			this = scope:real_father
		}
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		add_trait = pregnant
		scope:real_father = {
			if = {
				limit = {
					NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
				}
			}
			pregnancy_spouse_suspicion_chance_effect = yes
		}
	}
	
	option = {
		name = pregnancy.1001.a
	}
}

pregnancy.1101 = {
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:ex_spouse = {
						is_alive = no
					}
				}
				desc = pregnancy.1101.t.dead
			}
			desc = pregnancy.1101.t.divorced
		}
	}
	desc = {
		desc = pregnancy.1101.desc.start
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:ex_spouse = {
						is_alive = no
					}
				}
				desc = pregnancy.1101.desc.dead
			}
			desc = pregnancy.1101.desc.divorced
			
		}
		desc = pregnancy.1101.desc.end
	}
	theme = pregnancy
	left_portrait = scope:ex_spouse

	trigger = {
		# Event is only valid if our former spouse (dead or divorced) is both the real and assumed father (e.g., it was a legitimate pregnancy when the child was conceived).
		former_consort_was_father = yes
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		add_trait = pregnant
		scope:father = {
			save_scope_as = ex_spouse
		}
	}

	option = {
		name = {
			trigger = {
				scope:ex_spouse = {
					is_alive = yes
				}
			}
			text = pregnancy.1101.a.divorced
		}
		name = {
			trigger = {
				scope:ex_spouse = {
					is_alive = no
				}
			}
			text = pregnancy.1101.a.dead
		}

		# Notify spouses about the pregnancy.
		every_spouse = {
			trigger_event = pregnancy.1102
		}
		# Notify the father if alive.
		scope:ex_spouse = {
			if = {
				limit = {
					is_alive = yes
				}
				trigger_event = pregnancy.1103
			}
		}
	}
}

pregnancy.2001 = {
	title = pregnancy.2001.t
	desc = {
		desc = pregnancy.2001.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:real_father = { is_married = yes }
				}
				desc = pregnancy.2001.father_is_married
			}
			desc = pregnancy.2001.father_is_unmarried
		}
	}
	theme = pregnancy
	left_portrait = scope:real_father

	trigger = {
		NOR = {
			# If we are married or have concubines (or are a concubine) this event is not valid, as there is a (assumed) father.
			any_consort = {
				exists = this
			}
			# Same for if a former spouse/concubine got us pregant.
			former_consort_was_father = yes
		}
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		hidden_effect = {
			set_num_pregnancy_children = 1
			add_character_flag = {
				flag = unmarried_bastard_pregnancy
				months = 9
			}
		}
		unmarried_mother_pregnancy_effect = yes
	}

	option = { #Publicly name the father!
		name = pregnancy.2001.a
		bastardy_pregnancy_announcement_effect = yes
		hidden_effect = {
			expose_lover_secret_or_run_consequence_effect = {
				TARGET = scope:real_father
				EXPOSER = scope:mother
			}
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_honor = 0.5
				ai_boldness = 0.5
				ai_compassion = 0.25
			}
			compare_modifier = {
				value = ai_vengefulness
				trigger = {
					opinion = {
						target = scope:real_father
						value < 0
					}
					ai_vengefulness > 0
				}
			}
		}
	}

	option = { #Only tell the real_father
		name = pregnancy.2001.b
		hidden_effect = {
			add_character_flag = { #Add flag to determine what should happen in adultery.1101
				flag = planning_to_confess_to_real_father
				days = 22
			}
		}
		if = {
			limit = {
				any_owned_story = {
					story_type = story_peasant_affair
					var:peasant_character = {
						this = scope:real_father
					}
				}
			}
			add_character_flag = is_looking_for_peasant #To take the story_peasant_affair to the next step
			add_character_flag = peasant_affair_already_looking
			custom_tooltip = search_for_real_father_tt
		}
		else = {
			custom_tooltip = reveal_illegitimate_pregnancy_to_real_father_tt
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 0.5
				ai_compassion = 1
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Keep it secret!
		name = pregnancy.2001.c
		flavor = pregnancy.2001.c.tt
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Attempt to terminate the pregnancy
		name = pregnancy.2001.d
		pregnancy_termination_attempt_effect = yes
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}
}

#Married woman pregnant with a bastard child
pregnancy.2002 = {
	type = character_event
	title = pregnancy.2002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
				desc = pregnancy.2002.desc.polyamorous
			}
			desc = pregnancy.2002.desc
		}
	}
	theme = pregnancy
	left_portrait = scope:real_father
	right_portrait = scope:father
	
	trigger = {
		# If we are married and/or have concubines, but the real father is not one of them, it's a bastard!
		any_consort = {
			exists = this
		}
		pregnancy_real_father = {
			NOT = {	is_consort_of = root }	
		}

		# OBJECTION! If a former spouse/concubine is both the real and assumed father, it's not actually a bastard!
		NOT = {	
			former_consort_was_father = yes
		}
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		# If we got pregnant before our marriage, there will be no assumed father set. However, we need one for the event logic to work correctly.
		# Since this is a pretty rare edge case, we just go ahead and set the assumed father to a current living spouse.
		if = {
			limit = {
				NOT = { exists = pregnancy_assumed_father }
			}
			random_consort = {
				save_scope_as = assumed_father
			}
			hidden_effect = {
				set_pregnancy_assumed_father = scope:assumed_father
			}
		}

		save_scope_as = mother
		hidden_effect = {	
			set_num_pregnancy_children = 1
			if = {
				limit = {
					exists = primary_partner
				}
				primary_partner = {
					save_scope_as = spouse
				}
			}
			else = {
				random_consort = {
					save_scope_as = spouse
				}
			}
			add_character_flag = {
				flag = bastard_pregnancy
				months = 9
			}
		}
	}

	option = { #Confess
		name = {
			trigger = { NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } } }
			text = pregnancy.2002.a

		}
		name = {
			trigger = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
			text = pregnancy.2001.a
		}

		married_mother_pregnancy_effect = yes
		add_fornicator_trait_or_nothing_effect = yes
		bastardy_pregnancy_announcement_effect = yes
		expose_lover_secret_or_run_consequence_effect = {
			TARGET = scope:real_father
			EXPOSER = scope:mother
		}
		ai_chance = {
			base = 0
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				add = 100
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Tell the real father
		name = pregnancy.2002.b
		trigger = {
			NOT = {
				exists = primary_partner
			}
		}
		show_as_unavailable = {
			always = yes
		}
		if = {
			limit = {
				any_owned_story = {
					story_type = story_peasant_affair
					var:peasant_character = {
						this = scope:real_father
					}
				}
			}
			add_character_flag = is_looking_for_peasant #To take the story_peasant_affair to the next step
			add_character_flag = peasant_affair_already_looking
			custom_tooltip = search_for_real_father_tt
		}
		else = {
			custom_tooltip = reveal_illegitimate_pregnancy_to_real_father_tt
		}
		add_character_flag = { #Add flag to determine what should happen in adultery.1101
			flag = planning_to_confess_to_real_father
			days = 22
		}
		married_mother_pregnancy_effect = yes
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 0.5
				ai_compassion = 1
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
		stress_impact = {
			honest = medium_stress_impact_gain
		}
	}

	option = { #Keep it secret!
		name = pregnancy.2002.c
		custom_tooltip = pregnancy.2002.c.tt
		married_mother_pregnancy_effect = yes
		stress_impact = {
			honest = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Attempt to get rid of the child
		name = pregnancy.2002.d
		pregnancy_termination_attempt_effect = yes

		ai_chance = {
			base = 0
		}
	}
}