# game rules for childbirth to always be unproblematic
# this will throw an error in error.log, but testing shows that the overwrite works as intended

namespace = pregnancy

pregnancy.0001 = {
	hidden = yes
	immediate = {
		#PREGNANCY COMPLICATION CALCULATIONS & FLAG-SETTING
		random_list = {
			200 = { #All goes smoothly!
				#Less likely if health is bad
				modifier = {
					health <= fine_health
					add = -10
				}
				modifier = {
					health <= poor_health
					add = -15
				}

				#More kids means less risk of complications!
				modifier = {
					add = 5
					any_child = {
						even_if_dead = yes
						count >= 2
					}
				}
				modifier = {
					add = 5
					any_child = {
						even_if_dead = yes
						count >= 4
					}
				}

				#More likely if you have sacred childbirth
				modifier = {
					factor = 2 # Religious doctrine focusing on providing a sanitary birthing chamber and supplies should have a substantial impact on birth complications.
					faith = {
						has_doctrine_parameter = safer_childbirths_active
					}
				}
				#More likely if the Dynasty has the Kin legacy
				modifier = {
					factor = 1.5 # So too should constant care of pregnant/birthing mothers.
					has_dynasty = yes
					dynasty = {
						has_dynasty_perk = kin_legacy_3
					}
				}

				add_character_flag = {
					flag = birth_will_go_smoothly
					days = 270
				}
			}
			10 = { #Pregnancy ends prematurely
				modifier = { # Carnalitas game rule
					factor = 0
					OR = {
						has_game_rule = carn_pregnancy_complications_never
						has_character_flag = carn_no_pregnancy_complications
						has_trait_with_flag = carn_no_pregnancy_complications
					}
				}
				trigger_event = {
					id = pregnancy.2101
					days = { 80 120 }
				}
			}
			3 = { #Child dies during delivery (this triggers when the birth "should" have gone down, since we don't want to create the baby)
				modifier = { # Carnalitas game rule
					factor = 0
					OR = {
						has_game_rule = carn_pregnancy_complications_never
						has_character_flag = carn_no_pregnancy_complications
						has_trait_with_flag = carn_no_pregnancy_complications
					}
				}
				trigger_event = {
					id = birth.3001
					days = { 180 200 }
				}
			}
			2 = { #Mother dies
				modifier = { #to keep players from dying excessively
					add = -2
					is_ai = no
				}
				modifier = { # Carnalitas game rule
					factor = 0
					OR = {
						has_game_rule = carn_pregnancy_complications_never
						has_character_flag = carn_no_pregnancy_complications
						has_trait_with_flag = carn_no_pregnancy_complications
					}
				}
				add_character_flag = { #Flags blocks other birth events
					flag = birth_mother_will_die
					days = 270
				}
			}
			2 = { #Mother and child dies (this triggers when the birth "should" have gone down, since we don't want to create the baby)
				modifier = { #to keep players from dying excessively
					add = -2
					is_ai = no
				}
				modifier = { # Carnalitas game rule
					factor = 0
					OR = {
						has_game_rule = carn_pregnancy_complications_never
						has_character_flag = carn_no_pregnancy_complications
						has_trait_with_flag = carn_no_pregnancy_complications
					}
				}
				trigger_event = {
					id = birth.3021
					days = { 180 200 }
				}
			}
			10 = { #Sickly child (all other events happen as usual)
				modifier = {
					factor = 0.5 # Religious doctrine focusing on providing a sanitary birthing chamber and supplies should have a substantial impact on birth complications.
					faith = {
						has_doctrine_parameter = healthier_children_active
					}
				}
				modifier = { # Carnalitas game rule
					factor = 0
					OR = {
						has_game_rule = carn_pregnancy_complications_never
						has_character_flag = carn_no_pregnancy_complications
						has_trait_with_flag = carn_no_pregnancy_complications
					}
				}
				add_character_flag = { #Flags blocks other birth events
					flag = birth_child_will_become_sickly
					days = 270
				}
			}
			5 = { #Ill mother (all other events happen as usual)
				modifier = { #to keep players from dying excessively
					add = -4
					is_ai = no
				}
				modifier = { # Carnalitas game rule
					factor = 0
					OR = {
						has_game_rule = carn_pregnancy_complications_never
						has_character_flag = carn_no_pregnancy_complications
						has_trait_with_flag = carn_no_pregnancy_complications
					}
				}
				add_character_flag = { #Flags blocks other birth events
					flag = birth_mother_will_become_ill
					days = 270
				}
			}
		}
	}
}

pregnancy.1001 = {
	title = pregnancy.1001.t
	desc = pregnancy.1001.d
	theme = pregnancy
	left_portrait = scope:real_father

	trigger = {
		any_consort = {
			this = scope:real_father
		}
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		add_trait = pregnant
		add_trait = lactating
		scope:real_father = {
			if = {
				limit = {
					NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
				}
			}
			pregnancy_spouse_suspicion_chance_effect = yes
		}
	}
	
	option = {
		name = pregnancy.1001.a
	}
}

pregnancy.1101 = {
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:ex_spouse = {
						is_alive = no
					}
				}
				desc = pregnancy.1101.t.dead
			}
			desc = pregnancy.1101.t.divorced
		}
	}
	desc = {
		desc = pregnancy.1101.desc.start
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:ex_spouse = {
						is_alive = no
					}
				}
				desc = pregnancy.1101.desc.dead
			}
			desc = pregnancy.1101.desc.divorced
			
		}
		desc = pregnancy.1101.desc.end
	}
	theme = pregnancy
	left_portrait = scope:ex_spouse

	trigger = {
		# Event is only valid if our former spouse (dead or divorced) is both the real and assumed father (e.g., it was a legitimate pregnancy when the child was conceived).
		former_consort_was_father = yes
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		add_trait = pregnant
		add_trait = lactating
		scope:father = {
			save_scope_as = ex_spouse
		}
	}

	option = {
		name = {
			trigger = {
				scope:ex_spouse = {
					is_alive = yes
				}
			}
			text = pregnancy.1101.a.divorced
		}
		name = {
			trigger = {
				scope:ex_spouse = {
					is_alive = no
				}
			}
			text = pregnancy.1101.a.dead
		}

		# Notify spouses about the pregnancy.
		every_spouse = {
			trigger_event = pregnancy.1102
		}
		# Notify the father if alive.
		scope:ex_spouse = {
			if = {
				limit = {
					is_alive = yes
				}
				trigger_event = pregnancy.1103
			}
		}
	}
}
